<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Joybase</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>str=""

left_device_id=-1
right_device_id=-1
left_start_x=-1
left_start_y=-1
right_start_x=-1
right_start_y=-1
analog_width=sprite_width/2
analog_height=analog_width


left_analog_direction = -1
left_analog_distance = -1
right_analog_direction = -1
right_analog_distance = -1

rad=-1
lad=-1

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (i=0;i&lt;4;i += 1)
{
//   Check for first touch
if device_mouse_check_button_pressed(i,mb_left)
    {
    if device_mouse_raw_x(i) &lt; window_get_width()/2
        {
            left_device_id=i
            left_start_x=device_mouse_raw_x(i)
            left_start_y=device_mouse_raw_y(i)
                
        }
    }
}

// check mouse move

if left_device_id &gt; -1
{
    left_analog_direction = radtodeg(arctan2((device_mouse_raw_y(left_device_id)-(left_start_y)),(device_mouse_raw_x(left_device_id)-(left_start_x)+.000001)));
    left_analog_distance = sqrt(sqr(device_mouse_raw_x(left_device_id)-(left_start_x))+sqr(device_mouse_raw_y(left_device_id)-(left_start_y)));;

}

str=""
// check for release

if device_mouse_check_button_released(left_device_id,mb_left)
{
    left_device_id=-1
    left_analog_direction=-1
    left_analog_distance = -1
}

// Set variables for all objects to use
lad=-1
rad=-1
if abs(left_analog_distance) &gt; 15
{
    lad=point_direction(left_start_x,left_start_y,device_mouse_raw_x(left_device_id),device_mouse_raw_y(left_device_id))
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//str="left= "+string(left_device_id) + ", right= " + string(right_device_id)
if left_device_id&gt;-1
{
str="left direction= " + string(left_analog_direction) + "#left distance= " + string(left_analog_distance)
draw_sprite(Joybase,0,left_start_x,left_start_y)
if left_analog_distance &gt; analog_width {left_analog_distance=analog_width}
if left_analog_distance &lt; -analog_width {left_analog_distance=analog_width}

 point_x=(left_start_x)+left_analog_distance*(cos(left_analog_direction*pi/180));
 point_y=(left_start_y)+left_analog_distance*(sin(left_analog_direction*pi/180));

draw_sprite(JoyJoy,0,point_x,point_y)

}
if right_device_id&gt;-1
{
if right_analog_distance &gt; analog_width {right_analog_distance=analog_width}
if right_analog_distance &lt; -analog_width {right_analog_distance=analog_width}

str=str+"#right direction= " + string(right_analog_direction) + "#right distance= " + string(right_analog_distance)
draw_sprite(Joybase,0,right_start_x,right_start_y)

 point_x=(right_start_x)+right_analog_distance*(cos(right_analog_direction*pi/180));
 point_y=(right_start_y)+right_analog_distance*(sin(right_analog_direction*pi/180));

draw_sprite(JoyJoy,0,point_x,point_y)



}

//draw_text(20,50,str)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
